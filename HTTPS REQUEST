#include <ESP8266WiFi.h>
#include <WiFiClientSecure.h>

///////////////////////////////BASIC SETTINGS////////////////////////////
const char *ssid = "";     // Wifi Network Name
const char *password = ""; // Wifi Network Key
const char *host = ""; // Domain to Server
String path = ""; // Path of Server
const int httpsPort = 443;              // HTTPS PORT (default: 443)
int refreshtime = 15;                   // Make new HTTPS request after x seconds
///////////////////////////////BASIC SETTINGS////////////////////////////

String datarx;   // Received data as string
unsigned long crontimer = 0;

WiFiClientSecure httpsClient;

void setup() {
  delay(1000);
  Serial.begin(115200);
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.print("Connecting");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.print("Connected: ");
  Serial.println(ssid);
}

void loop() {
  if (millis() - crontimer >= refreshtime * 1000 || crontimer == 0) {
    crontimer = millis();
    callhttps();
  }
}

void callhttps() {
  httpsClient.setInsecure(); // Ignore SSL certificate verification

  if (!httpsClient.connect(host, httpsPort)) {
    Serial.println("Connection failed");
    return;
  }

  Serial.println("Connected to Server");

  httpsClient.print(String("GET ") + path + " HTTP/1.1\r\n" +
                    "Host: " + host + "\r\n" +
                    "Connection: close\r\n\r\n");

  // Wait for the response headers to be finished
  while (httpsClient.connected()) {
    String line = httpsClient.readStringUntil('\n');
    if (line == "\r") {
      break;
    }
  }

  // Read and print the response body
  while (httpsClient.available()) {
      datarx = httpsClient.readStringUntil('\n');
      if (datarx.length() == 4 || datarx.length() == 5) { // Ensure the line is either 4 or 5 characters long
        Serial.println(datarx);
      }
  }

  httpsClient.stop();
}
